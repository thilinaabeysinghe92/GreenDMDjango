/* jscow - Javascript Component Framework - jscow-button-1.0.0 - Mario Linz - http://www.jscow.de */jsCow.res.components.button=function(){};jsCow.res.components.button.prototype={init:function(){return this},setDefaultMVC:function(){this.setModel(jsCow.res.model.button);this.setView(jsCow.res.view.button);this.setController(jsCow.res.controller.button);return this},disabled:function(){this.globalEvents.trigger("disabled",{},this);return this},enabled:function(){this.globalEvents.trigger("enabled",{},this);return this},setTitle:function(a){this.globalEvents.trigger("setTitle",{title:a},this);return this},toggle:function(){this.globalEvents.trigger("toggle",{},this);return this},setToggleHandler:function(a,b){this.globalEvents.trigger("setClickHandler",{pushHandler:a,pullHandler:b,type:"toggle"},this);return this},reset:function(){this.globalEvents.trigger("reset",{},this);return this},setClickHandler:function(a){this.globalEvents.trigger("setClickHandler",{clickHandler:a,type:"click"},this);return this},click:function(){this.globalEvents.trigger("click",{},this);return this},setToggleState:function(a){if(a==undefined){var a=false}this.globalEvents.trigger("setToggleState",{state:a},this);return this},setButtonGroup:function(a){this.globalEvents.trigger("setButtonGroup",{group:a},this);return this},};jsCow.res.model.button=function(){this.type="jsCow.res.model.button";this.config={globalDisabled:false,enabled:true,title:"Button",toggle:false,pressed:false,clickHandler:false,pushHandler:false,pullHandler:false,toggleButtonGroup:false};this.resetConfig={}};jsCow.res.model.button.prototype={init:function(){this.resetConfig=this.getConfig();this.globalEvents.trigger("viewInit",this.getConfig(),this.getCmp())},setTitle:function(a){if(this.isEnabled()){this.setConfig({lastTitle:this.getConfig("title"),title:a.data.title});this.globalEvents.trigger("viewUpdate",this.getConfig(),this.getCmp())}return this},toggle:function(a){if(this.isEnabled()&&this.config.toggle){var b=this;if(this.getConfig("toggleButtonGroup")){this.globalEvents.trigger("buttonGroupEvent",{activeButton:this.getCmp(),toggleButtonGroup:this.getConfig("toggleButtonGroup")})}else{if(!this.config.pressed){this.setConfig({pressed:true});if(typeof this.config.pushHandler=="function"){this.config.pushHandler.call(b.getCmp())}}else{this.setConfig({pressed:false});if(typeof this.config.pullHandler=="function"){this.config.pullHandler.call(b.getCmp())}}}this.globalEvents.trigger("viewUpdate",this.getConfig(),this.getCmp())}return this},reset:function(){if(this.isEnabled()){this.setConfig(this.resetConfig);this.globalEvents.trigger("viewUpdate",this.getConfig(),this.getCmp())}return this},setClickHandler:function(a){if(this.isEnabled()){var b=this;this.setConfig({clickHandler:a.data.clickHandler});if(this.getConfig("clickHandler")==undefined){this.setConfig({clickHandler:false});a.data.element.unbind("click",this.getConfig("clickHandler"))}else{a.data.element.bind("click",function(){b.globalEvents.trigger("click",{element:a.data.element},b.getCmp())})}}return this},setToggleHandler:function(a){if(this.isEnabled()){var b=this;this.setConfig({pushHandler:a.data.pushHandler,pullHandler:a.data.pullHandler});a.data.element.bind("click",function(){b.globalEvents.trigger("click",{element:a.data.element},b.getCmp())})}return this},click:function(a){if(this.isEnabled()){if(this.getConfig("toggle")){if(!this.getConfig("toggleButtonGroup")){this.toggle()}else{if(!this.getConfig("pressed")){this.globalEvents.trigger("buttonGroupEvent",{activeButton:this.getCmp(),toggleButtonGroup:this.getConfig("toggleButtonGroup")})}}}else{this.getConfig("clickHandler").call(this.getCmp())}this.globalEvents.trigger("viewUpdate",this.getConfig(),this.getCmp())}return this},setToggleState:function(a){if(this.isEnabled()){this.setConfig({toggle:a.data.state})}return this},setButtonGroup:function(a){if(this.isEnabled()){if(a.data.group){this.setConfig({toggleButtonGroup:a.data.group,toggle:true});this.globalEvents.register("buttonGroupEvent",this.getCmp())}else{this.setConfig({toggleButtonGroup:false,toggle:false});this.globalEvents.unregister("buttonGroupEvent",this.getCmp())}this.globalEvents.trigger("viewUpdate",this.getConfig(),this.getCmp())}return this},buttonGroupEvent:function(a){if(this.isEnabled()&&this.config.toggle){if((a.data.activeButton.getID()==this.getCmp().getID())&&(a.data.toggleButtonGroup==this.getConfig("toggleButtonGroup"))){if(!this.getConfig("pressed")&&typeof this.config.pushHandler=="function"){this.config.pushHandler.call(this.getCmp())}this.setConfig({pressed:true})}else{if(a.data.toggleButtonGroup==this.getConfig("toggleButtonGroup")){if(typeof this.config.pullHandler=="function"){this.config.pullHandler.call(this.getCmp())}this.setConfig({pressed:false})}}this.globalEvents.trigger("viewUpdate",this.getConfig(),this.getCmp())}return this}};jsCow.res.view.button=function(){this.execInit=false;this.type="jsCow.res.view.button";this.dom={};this.dom.main=$("<div/>").addClass("jscow-btn jscow-float-left jscow-cursor");this.dom.content=$("<div/>").addClass("jscow-btn-content").appendTo(this.dom.main);this.dom.ico=$("<img/>");this.configCache={}};jsCow.res.view.button.prototype={init:function(a){var b=this;this.dom.main.hover(function(){b.cssHover(true)},function(){b.cssHover(false)}).mousedown(function(){b.cssMousedown()}).mouseup(function(){b.cssMouseup()}).mouseout(function(){b.cssMouseup()});this.update(a)},update:function(a){var a=a.data;this.configCache=a;if(a){if(!a.enabled||a.globalDisabled){this.dom.main.removeClass("jscow-btn jscow-cursor").addClass("jscow-btn-disabled")}else{this.dom.main.addClass("jscow-btn jscow-cursor").removeClass("jscow-btn-disabled jscow-btn-hover");if(a.pressed){this.dom.main.addClass("jscow-btn-pressed jscow-cursor").removeClass("jscow-btn jscow-btn-disabled")}else{this.dom.main.addClass("jscow-btn jscow-cursor").removeClass("jscow-btn-pressed")}if(a.title){this.dom.content.html(a.title)}if(a.hide){this.dom.main.addClass("jscow-hide")}else{this.dom.main.removeClass("jscow-hide")}}}return this},bindClickEvent:function(a){switch(a.data.type){case"click":this.globalEvents.trigger("bindClickEvent",{element:this.dom.main,clickHandler:a.data.clickHandler},this.getCmp());break;case"toggle":this.globalEvents.trigger("setToggleHandler",{element:this.dom.main,pushHandler:a.data.pushHandler,pullHandler:a.data.pullHandler},this.getCmp());break}return this},cssHover:function(a){if(this.configCache.enabled||!this.configCache.globalDisabled){if(a){this.dom.main.addClass("jscow-btn-hover")}else{this.dom.main.removeClass("jscow-btn-hover")}}return this},cssMousedown:function(){if(this.configCache.enabled||!this.configCache.globalDisabled){this.dom.main.addClass("jscow-btn-press")}return this},cssMouseup:function(){if(this.configCache.enabled||!this.configCache.globalDisabled){this.dom.main.removeClass("jscow-btn-press")}return this}};jsCow.res.controller.button=function(){this.type="jsCow.res.controller.button"};jsCow.res.controller.button.prototype={init:function(){},handleSetTitle:function(a){if(this.isMethodExists(this.getModel().setTitle)){this.getModel().setTitle(a)}return this},handleToggle:function(){if(this.isMethodExists(this.getModel().toggle)){this.getModel().toggle()}return this},handleReset:function(){if(this.isMethodExists(this.getModel().reset)){this.getModel().reset()}return this},handleSetClickHandler:function(a){this.getView().isMethodExistsExec("bindClickEvent",a);return this},handleBindClickEvent:function(a){if(this.isMethodExists(this.getModel().setClickHandler)){this.getModel().setClickHandler(a)}return this},handleSetToggleHandler:function(a){if(this.isMethodExists(this.getModel().setToggleHandler)){this.getModel().setToggleHandler(a)}return this},handleClick:function(a){if(this.isMethodExists(this.getModel().click)){this.getModel().click(a)}return this},handleSetToggleState:function(a){if(this.isMethodExists(this.getModel().setToggleState)){this.getModel().setToggleState(a)}return this},handleSetButtonGroup:function(a){if(this.isMethodExists(this.getModel().setButtonGroup)){this.getModel().setButtonGroup(a)}return this},handleButtonGroupEvent:function(a){if(this.isMethodExists(this.getModel().buttonGroupEvent)){this.getModel().buttonGroupEvent(a)}return this}};